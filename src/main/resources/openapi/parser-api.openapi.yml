openapi: 3.0.0
info:
  title: Data Harvest Parser
  version: 0.0.1
servers:
  - url: http://localhost:8082/api
    description: Development Server

paths:
  /parser/preset:
    post:
      tags:
        - Parser
      parameters:
        - name: userId
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      summary: Create Parser Settings Preset
      operationId: createParserSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParsingPresetDTO"
      responses:
        '201':
          description: Parser Settings Preset was Created Successfully
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          description: Internal Server Error


  /parser/preset/{presetId}:
    get:
      tags:
        - Parser
      parameters:
        - name: presetId
          in: path
          description: Preset id
          required: true
          schema:
            type: string
        - name: storageId
          in: query
          description: Storage id
          required: true
          schema:
            type: string
      summary: Get Parser Settings Preset by Id
      operationId: getParserSettingsById
      responses:
        '201':
          description: Parser Settings was Retrieved Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParsingPresetDTO"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Parser
      parameters:
        - name: presetId
          in: path
          description: Preset id
          required: true
          schema:
            type: string
        - name: folderId
          in: query
          description: Folder id
          required: true
          schema:
            type: string
        - name: storageId
          in: query
          description: Storage id
          required: true
          schema:
            type: string
      summary: Delete Parser Settings Preset by Id
      operationId: deleteParserSettingsById
      responses:
        '201':
          description: Parser Settings was Deleted Successfully
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          description: Internal Server Error
    post:
      tags:
        - Parser
      parameters:
        - name: presetId
          in: path
          description: Preset id
          required: true
          schema:
            type: string
#            format: UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunParserRequest"
      summary: Run Parser With Concrete Preset by its Id and Saving New Parsing History With Current Date
      operationId: runParser
      responses:
        '201':
          description: Parser Settings was Deleted Successfully
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          description: Internal Server Error



  /parser/preset/{presetId}/download:
    get:
      summary: Download Results File by the Concrete Preset ID
      tags:
        - Parser
      parameters:
        - in: path
          name: presetId
          required: true
          schema:
            type: string
            minimum: 1
          description: Parser Preset ID
        - name: storageId
          in: query
          description: Storage id
          required: true
          schema:
            type: string
        - name: resultId
          in: query
          description: Parsing History Element id
          required: true
          schema:
            type: integer
            format: int64
      operationId: downloadFile
      responses:
        200:
          description: The file download was successful
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error


  /storage:
    post:
      tags:
        - storage
      summary: Create Storage For User With Id
      parameters:
        - name: userId
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      operationId: createStorage
      responses:
        200:
          description: The Storage was created successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error
    get:
      tags:
        - storage
      summary: Retrieving The Whole Storage With Items of User with Concrete Id
      parameters:
        - name: userId
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      operationId: getStorageByUserId
      responses:
        200:
          description: The Storage was retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageDTO"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error
    put:
      tags:
        - storage
      summary: Update The Storage With Items of User with Concrete Id
      parameters:
        - name: userId
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      operationId: updateStorageByUserId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StorageDTO"
      responses:
        200:
          description: The Storage was retrieved successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error


  /storage/{storageId}:
    get:
      tags:
        - storage
      summary: Retrieving The Whole Storage With Items of Storage by its Id
      parameters:
        - name: storageId
          in: path
          description: Storage id
          required: true
          schema:
            type: string
      operationId: getStorageById
      responses:
        200:
          description: The Storage was updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageDTO"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error
    put:
      tags:
        - storage
      summary: Update The Storage With Items By its Id
      parameters:
        - name: storageId
          in: path
          description: Storage id
          required: true
          schema:
            type: string
      operationId: updateStorageById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StorageDTO"
      responses:
        200:
          description: The Storage was updated successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error

  /storage/folder:
    post:
      tags:
        - storage
      summary: Create Folder in Storage For User with id
      parameters:
        - name: userId
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      operationId: createFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderDTO'
      responses:
        201:
          description: The Folder was created successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal Server Error

  /storage/{storageId}/folder/{folderId}:
    get:
      tags:
        - Storage
      summary: Get Folder by Folder ID
      operationId: getFolderByFolderId
      parameters:
        - name: storageId
          in: path
          required: true
          schema:
            type: string
          description: The ID of Storage to retrieve
        - name: folderId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the folder to retrieve
      responses:
        '200':
          description: The Folder was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderDTO'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Folder not found
        '500':
          description: Internal Server Error

    put:
      tags:
        - Storage
      summary: Update a folder by folder ID
      operationId: updateFolderById
      parameters:
        - name: storageId
          in: path
          required: true
          schema:
            type: string
          description: The ID of Storage to update
        - name: folderId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the folder to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderDTO"
      responses:
        '200':
          description: The folder was updated successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Folder with such id not found
        '500':
          description: Internal Server Error

    delete:
      tags:
        - Storage
      summary: Delete a folder by folder ID
      operationId: deleteFolderById
      parameters:
        - name: storageId
          in: path
          required: true
          schema:
            type: string
          description: The ID of Storage to delete
        - name: folderId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the folder to delete
      responses:
        '200':
          description: The folder was deleted successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Folder with such id not found
        '500':
          description: Internal Server Error

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  schemas:

    ParsingPresetDTO:
      allOf:
        - $ref: '#/components/schemas/StorageItemDTO'
        - type: object
          required:
            - storageId
            - firstPageUrl
            - numOfPagesToParse
            - className
            - tagName
            - cssSelectorNextPage
            - header
            - elementLocators
            - parsingHistory
          properties:
#            id:
#              type: string
#              format: uuid
            storageId:
              type: string
#              format: uuid
            name:
              type: string
            tags:
              type: array
              items:
                type: string
            firstPageUrl:
              type: string
            numOfPagesToParse:
              type: integer
              format: int32
            className:
              type: string
            tagName:
              type: string
            cssSelectorNextPage:
              type: string
            header:
              type: array
              items:
                type: string
            elementLocators:
              type: array
              items:
                $ref: '#/components/schemas/ElementLocatorDTO'
            parsingHistory:
              type: array
              items:
                $ref: '#/components/schemas/ParsingResultDTO'
            parentFolderId:
              type: string
#              format: uuid


    ParsingResultDTO:
      type: object
      required:
        - date
        - outputFileType
        - parsingPresetId
        - linkToDownloadResults
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
        linkToDownloadResults:
          type: string
        outputFileType:
          type: object
          $ref: "#/components/schemas/OutputFileTypeDTO"
        parsingPresetId:
          type: string
#          format: uuid

    ElementLocatorDTO:
      type: object
      required:
        - name
        - elementType
        - pathToLocator
        - parsingPresetId
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        elementType:
          type: object
          $ref: "#/components/schemas/ElementTypeDTO"
        pathToLocator:
          type: string
        extraPointer:
          type: string
        parsingPresetId:
          type: string
#          format: uuid

    FolderDTO:
      allOf:
        - $ref: '#/components/schemas/StorageItemDTO'
        - type: object
          required:
            - storageId
            - parentFolderId
            - folderItems
          properties:
#            id:
#              type: string
#              format: uuid
            storageId:
              type: string
#              format: uuid
            parentFolderId:
              type: string
#              format: uuid
            folderItems:
              type: array
              items:
                $ref: '#/components/schemas/StorageItemDTO'

    StorageDTO:
      type: object
      required:
        - id
        - userId
        - storageItems
      properties:
        id:
          type: string
#          format: uuid
        userId:
          type: integer
          format: int64
        storageItems:
          type: array
          items:
            $ref: '#/components/schemas/StorageItemDTO'

    StorageItemDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tags:
          type: array
          items:
            type: string

    OutputFileTypeDTO:
      type: string
      enum:
        - XLSX
        - CSV

    ElementTypeDTO:
      type: string
      enum:
        - TAG_ATTR
        - CSS
        - CLASS_NAME
        - ID

    RunParserRequest:
      type: object
      properties:
        parsingPreset:
          $ref: '#/components/schemas/ParsingPresetDTO'
        parsingResult:
          $ref: '#/components/schemas/ParsingResultDTO'
      required:
        - parsingPreset
        - parsingResult